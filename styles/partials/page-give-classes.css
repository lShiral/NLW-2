#page-give-classes #container {
  width: 100vw;
  height: 100vh;
}

#page-give-classes .page-header .header-content {
  margin-bottom: 6.4rem;
}

#page-give-classes main {
  background: var(--color-box-base);
  width: 100%; /*Será 100% enquanto for menor que 74rem , se for maior vai ficar no 74rem */
  max-width: 74rem;
  border-radius: .8rem;
  margin: -3.2rem auto 3.2rem; 
  padding-top: 6.4rem;
}

#page-give-classes fieldset {
  border: none;

  padding: 0 2.4rem;
}

#page-give-classes fieldset legend {
  font: 700 2.4rem Archivo;
  color: var(--color-text-title);
  margin-bottom: 2.4rem;

  display: flex;
  align-items: center;
  justify-content: space-between;

  width: 100%;

  padding-bottom: 1.6rem; /*Sem o padding , a borda fica grudada no "Seus dados". Box model : preenchimento primeiro , depois a borda */
  border-bottom: 1px solid var(--color-line-in-white);
}

#page-give-classes fieldset legend button {
  background: none;
  border: 0;

  color: var(--color-primary);
  
  font: 700 1.6rem Archivo;

  cursor: pointer;

  transition: 0.2;
}

#page-give-classes fieldset legend button:hover {
  /*transform: translateY(-5px); faz o botão subir o eixo y em 5px , é bonitinho. Não será aplicado aqui */
  color: var(--color-primary-dark);

}

#page-give-classes fieldset + fieldset {
  margin-top: 6.4rem;
}

#page-give-classes .input-block + .input-block,  /*Quero um input-block que suceda outro. O "+" que faz esse entendimento.  */
#page-give-classes .input-block + .textarea-block, /*Aqui significa que eu quero o textarea-block após o input-block */
#page-give-classes .select-block + .input-block /*Por fim, aqui quero o input-block que suceda o select-block */
{
  margin-top: 2.4rem;
}

#page-give-classes main footer {
  padding: 4rem 2.4rem;

  background: var(--color-box-footer);
  border-top: 1px solid var(--color-line-in-white);
  margin-top: 6.4rem;
}

#page-give-classes main footer p {
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.4rem;
  line-height: 2.4rem;
  color: var(--color-text-complement);
}

#page-give-classes main footer p img {
  margin-right: 2rem;
}

#page-give-classes main footer button {
  width: 100%;
  height: 5.6rem;
  background: var(--color-secondary);
  color: var(--color-button-text);
  border: 0;
  border-radius: .8rem;
  cursor: pointer;
  font: 700 1.6rem Archivo;

  display: flex;
  align-items: center;
  justify-content: center;
  text-decoration: none;

  transition: 0.2s;
  margin-top: 3.2rem;
}

.schedule-item + .schedule-item {
  margin-top: 3.2rem;
  padding-top: 3.2rem;

  border-top: 1px solid var(--color-line-in-white);
}

@media (min-width: 700px) { /*Relativo ao Desktop */
    #page-give-class #container {
      max-width: 100vw;
    }

    #page-give-classes .page-header .header-content {
      margin-bottom: 0;
    }

    #page-give-classes main fieldset {
      padding: 0 64px;
    }

    .schedule-item {
      display: grid;
      grid-template-columns: 2fr 1fr 1fr;
      column-gap: 1.6rem;  /*Coloca espaço entre colunas */
    }

   /* .schedule-item .input-block {  <= serveria para alinhar os formulários dos horários disponíveis (dia , das , até), mas essa opção foi descartada pq teria que usar o !important
      margin-top: 0  !important (Apenas com margin-top não funciona, por causa do efeito de importância da cascata. Com o important vai funcionar, mas  preciso tomar cuidado com esse efeito 
    }*/

    #page-give-classes #schedule-items .select-block + .input-block,
    #page-give-classes #schedule-items .input-block + .input-block {
      margin-top: 0;
    }

    #page-give-classes main footer {
      padding: 40px 64px; /*Preenchimento interno*/

      display: flex; /*esse display: flex não vai alterar o display dos elementos internos e sim organizá-los */
      justify-content: space-between;
    }

    #page-give-classes main footer button {
      margin-top: 0;  /*pq antes do margin-top:0 o item não estava alinhado ao eixo X  */

      width: 200px;
    }
}